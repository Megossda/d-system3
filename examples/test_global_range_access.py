# File: examples/test_global_range_access.py
"""Test that range systems are properly integrated into the global D&D architecture."""

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def test_global_systems_import():
    """Test importing range systems through global systems."""
    print("=== Testing Global Systems Import ===")
    
    try:
        # Test importing through systems module
        from systems import AttackSystem, WeaponRanges, battlefield, Position, RangeSystem
        print("‚úÖ Range systems available through 'from systems import'")
        
        # Test specific components
        print(f"‚úÖ AttackSystem available: {AttackSystem}")
        print(f"‚úÖ WeaponRanges available: {WeaponRanges}")
        print(f"‚úÖ battlefield available: {battlefield}")
        print(f"‚úÖ Position available: {Position}")
        print(f"‚úÖ RangeSystem available: {RangeSystem}")
        
        return True
    except ImportError as e:
        print(f"‚ùå Global systems import failed: {e}")
        return False

def test_global_root_import():
    """Test importing range systems through root module."""
    print("\n=== Testing Global Root Import ===")
    
    try:
        # Test importing through root D&D module
        sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
        import __init__ as dnd
        
        # Test that range components are available
        print(f"‚úÖ dnd.AttackSystem available: {hasattr(dnd, 'AttackSystem')}")
        print(f"‚úÖ dnd.WeaponRanges available: {hasattr(dnd, 'WeaponRanges')}")
        print(f"‚úÖ dnd.battlefield available: {hasattr(dnd, 'battlefield')}")
        print(f"‚úÖ dnd.Position available: {hasattr(dnd, 'Position')}")
        print(f"‚úÖ dnd.RangeSystem available: {hasattr(dnd, 'RangeSystem')}")
        
        return True
    except ImportError as e:
        print(f"‚ùå Global root import failed: {e}")
        return False

def test_range_functionality_through_global():
    """Test that range functionality works through global imports."""
    print("\n=== Testing Range Functionality Through Global Access ===")
    
    try:
        # Import through global systems
        from systems import AttackSystem, WeaponRanges, battlefield, Position, CreatureSize, RangeSystem
        from creatures.base import Creature
        
        # Clear battlefield
        battlefield.creature_positions.clear()
        battlefield.creature_sizes.clear()
        
        # Create creatures using global access
        archer = Creature("GlobalArcher", 3, 15, 25, 30, {'dex': 16})
        target = Creature("GlobalTarget", 1, 12, 10, 30, {'str': 10})
        
        # Place using global battlefield
        battlefield.place_creature(archer, Position(0, 0), CreatureSize.MEDIUM)
        battlefield.place_creature(target, Position(15, 0), CreatureSize.MEDIUM)  # 75 feet
        
        # Test weapon ranges through global access
        longbow_range = WeaponRanges.get_weapon_range("longbow")
        print(f"‚úÖ Longbow range via global: {longbow_range}")
        
        # Test range checking through global access
        range_check = RangeSystem.check_range(archer, target, longbow_range)
        print(f"‚úÖ Range check via global: {range_check}")
        
        # Test attack through global access
        longbow_weapon = {
            'name': 'longbow',
            'damage': '1d8',
            'ability': 'dex',
            'damage_type': 'piercing'
        }
        
        print("Testing attack through global AttackSystem...")
        result = AttackSystem.make_weapon_attack(archer, target, longbow_weapon)
        print(f"‚úÖ Attack via global system result: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Range functionality test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_existing_system_integration():
    """Test that range integration doesn't break existing functionality."""
    print("\n=== Testing Existing System Integration ===")
    
    try:
        # Test existing global imports still work
        from systems import perform_d20_test, combat_manager, SpellManager
        from core import roll_d20, get_ability_modifier
        from creatures.base import Creature
        
        print("‚úÖ Existing systems still accessible")
        
        # Test basic functionality still works
        creature = Creature("TestCreature", 2, 12, 15, 30, {'str': 14})
        
        # Test d20 system
        roll_result = roll_d20()
        print(f"‚úÖ D20 roll still works: {roll_result}")
        
        # Test ability modifier
        mod = get_ability_modifier(16)
        print(f"‚úÖ Ability modifier still works: {mod}")
        
        # Test that creature can be created
        print(f"‚úÖ Creature creation still works: {creature}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Existing system integration test failed: {e}")
        return False

def main():
    """Run all global architecture tests."""
    print("D&D System - Global Range Architecture Integration Test")
    print("=" * 70)
    
    tests_passed = 0
    total_tests = 4
    
    try:
        # Test 1: Global systems import
        if test_global_systems_import():
            tests_passed += 1
            print("‚úÖ Global systems import PASSED")
        else:
            print("‚ùå Global systems import FAILED")
        
        # Test 2: Global root import
        if test_global_root_import():
            tests_passed += 1
            print("‚úÖ Global root import PASSED")
        else:
            print("‚ùå Global root import FAILED")
        
        # Test 3: Range functionality through global
        if test_range_functionality_through_global():
            tests_passed += 1
            print("‚úÖ Range functionality through global PASSED")
        else:
            print("‚ùå Range functionality through global FAILED")
        
        # Test 4: Existing system integration
        if test_existing_system_integration():
            tests_passed += 1
            print("‚úÖ Existing system integration PASSED")
        else:
            print("‚ùå Existing system integration FAILED")
        
        print("\n" + "=" * 70)
        print(f"GLOBAL ARCHITECTURE TEST SUMMARY: {tests_passed}/{total_tests} tests passed")
        
        if tests_passed == total_tests:
            print("üéØ RANGE INTEGRATION SUCCESSFULLY ADDED TO GLOBAL ARCHITECTURE!")
            print("\n‚úÖ CONFIRMED GLOBAL FEATURES:")
            print("‚Ä¢ Range systems accessible via 'from systems import'")
            print("‚Ä¢ Range functionality works through global imports")
            print("‚Ä¢ Existing systems remain fully functional")
            print("‚Ä¢ Global architecture maintains all functionality")
            print("‚Ä¢ Range validation is now part of the core system")
        else:
            print(f"‚ùå {total_tests - tests_passed} tests failed - global integration incomplete")
        
    except Exception as e:
        print(f"\nüí• CRITICAL ERROR: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()